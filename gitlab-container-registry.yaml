package:
  name: gitlab-container-registry
  version: 4.6.0
  epoch: 1
  description: The GitLab Container Registry originated as a fork of the Docker Distribution Registry, now CNCF Distribution, both distributed under Apache License Version 2.0.
  copyright:
    - license: Apache-2.0

environment:
  environment:
    BUILD_TAGS: "include_oss include_gcs continuous_profiler_stackdriver"
    CGO_ENABLED: "0"

pipeline:
  - uses: git-checkout
    with:
      repository: https://gitlab.com/gitlab-org/container-registry
      expected-commit: 4f1332a786fdd14944a377f2b17b9be2a8270496
      tag: v${{package.version}}-gitlab

  - runs: |
      mkdir -p "${{targets.contextdir}}"/etc/docker/registry

  - uses: go/build
    with:
      packages: ./cmd/registry
      output: registry
      ldflags: -s -w -X github.com/docker/distribution/version.Version=${{package.version}} -X github.com/docker/distribution/version.Revision=$(git rev-parse HEAD || echo '<unknown>') -X github.com/docker/distribution/version.Package="github.com/docker/distribution" -X github.com/docker/distribution/version.BuildTime=$(date +%F-%T)

  - uses: strip

update:
  enabled: true
  release-monitor:
    identifier: 372925
    strip-suffix: "-gitlab"

subpackages:
  - name: ${{package.name}}-compat
    pipeline:
      - runs: |
          # https://gitlab.com/gitlab-org/build/CNG/-/blob/master/gitlab-container-registry/scripts/process-wrapper?ref_type=heads#L3
          mkdir -p "${{targets.contextdir}}"/bin
          ln -s /usr/bin/registry "${{targets.contextdir}}"/bin/registry

test:
  environment:
    contents:
      packages:
        - crane
        - ${{package.name}}-compat
  pipeline:
    - runs: |
        #!/bin/bash

        # Create the configuration file
        tee /etc/docker/registry/config.yml <<EOL
        # This config file is a basic configuration using filesystem metadata and blob
        # storage.
        version: 0.1
        log:
          accesslog:
            disabled: false
            formatter: text
          level: info
          formatter: text
          fields:
            service: registry
        storage:
          delete:
            enabled: true
          filesystem:
            # Temp dir, rename if you need persistence.
            # registry/storage/paths.go describes the structure of the data
            # written to this directory
            rootdirectory: "/tmp/registry"
        http:
          # Registry API will be accessible at localhost:5000
          addr: :5000
          debug:
            addr: :5001
            prometheus:
              enabled: true
              path: /metrics
            pprof:
              enabled: true
        EOL

        # Run the Docker registry with the configuration file
        /bin/registry serve /etc/docker/registry/config.yml &
        PID=$!

        # Wait for the registry to start
        sleep 5

        # Test the registry
        crane catalog localhost:5000

        # copy the image to the registry
        crane copy alpine:latest localhost:5000/alpine:latest

        # check for the image in the registry
        crane manifest localhost:5000/alpine:latest

        # Stop the registry
        kill $PID
